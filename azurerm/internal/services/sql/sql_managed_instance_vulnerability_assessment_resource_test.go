package sql_test

import (
	"context"
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/acceptance"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/acceptance/check"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/clients"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/services/sql/parse"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

type SqlManagedInstanceVulnerabilityAssessmentResource struct{}

func TestAccAzureRMSqlMiServerVulnerabilityAssessment_basic(t *testing.T) {
	data := acceptance.BuildTestData(t, "azurerm_sql_managed_instance_vulnerability_assessment", "test")
	r := SqlManagedInstanceVulnerabilityAssessmentResource{}

	data.ResourceTest(t, r, []resource.TestStep{
		{
			Config: r.basic(data),
			Check: resource.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.ImportStep("administrator_login_password"),
	})
}

func TestAccAzureRMSqlMiServerVulnerabilityAssessment_complete(t *testing.T) {
	data := acceptance.BuildTestData(t, "azurerm_sql_managed_instance_vulnerability_assessment", "test")
	r := SqlManagedInstanceVulnerabilityAssessmentResource{}

	data.ResourceTest(t, r, []resource.TestStep{
		{
			Config: r.basic(data),
			Check: resource.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.ImportStep("administrator_login_password"),
		{
			Config: r.complete(data),
			Check: resource.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.ImportStep("administrator_login_password"),
		{
			Config: r.basic(data),
			Check: resource.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.ImportStep("administrator_login_password"),
	})
}

func (r SqlManagedInstanceVulnerabilityAssessmentResource) Exists(ctx context.Context, client *clients.Client, state *terraform.InstanceState) (*bool, error) {
	id, err := parse.ManagedInstanceID(state.ID)
	if err != nil {
		return nil, err
	}

	resp, err := client.Sql.ManagedInstanceVulnerabilityAssessmentsClient.Get(ctx, id.ResourceGroup, id.Name)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			return utils.Bool(false), nil
		}
		return nil, fmt.Errorf("retrieving SQL Managed Instance Vulnerability Assessment %q: %+v", id.ID(), err)
	}
	return utils.Bool(true), nil
}

func (r SqlManagedInstanceVulnerabilityAssessmentResource) basic(data acceptance.TestData) string {
	return fmt.Sprintf(`
%s

resource "azurerm_sql_managed_instance_vulnerability_assessment" "test" {
  sql_managed_instance_id      = azurerm_sql_managed_instance.test.id
  storage_container_path       = "${azurerm_storage_account.test.primary_blob_endpoint}${azurerm_storage_container.test.name}/"
  storage_container_access_key = azurerm_storage_account.test.primary_access_key
}
`, SqlManagedInstanceVulnerabilityAssessmentResource{}.template(data))
}

func (r SqlManagedInstanceVulnerabilityAssessmentResource) complete(data acceptance.TestData) string {
	return fmt.Sprintf(`
%s

resource "azurerm_sql_managed_instance_vulnerability_assessment" "test" {
  sql_managed_instance_id      = azurerm_sql_managed_instance.test.id
  storage_container_path       = "${azurerm_storage_account.test.primary_blob_endpoint}${azurerm_storage_container.test.name}/"
  storage_container_access_key = azurerm_storage_account.test.primary_access_key

  recurring_scans {
    email_subscription_admins = true
    email_addresses = ["pub1@email.com"]
  }
}
`, SqlManagedInstanceVulnerabilityAssessmentResource{}.template(data))
}

func (r SqlManagedInstanceVulnerabilityAssessmentResource) template(data acceptance.TestData) string {
	return fmt.Sprintf(`
%s

resource "azurerm_storage_account" "test" {
  name                     = "acctestacc%s"
  resource_group_name      = azurerm_resource_group.test.name
  location                 = azurerm_resource_group.test.location
  account_tier             = "Standard"
  account_replication_type = "LRS"
  allow_blob_public_access = true

  tags = {
    environment = "staging"
  }
}

resource "azurerm_storage_container" "test" {
  name                  = "vhds"
  storage_account_name  = azurerm_storage_account.test.name
  container_access_type = "private"
}
`, SqlManagedInstanceResource{}.basic(data), data.RandomInteger)
}
