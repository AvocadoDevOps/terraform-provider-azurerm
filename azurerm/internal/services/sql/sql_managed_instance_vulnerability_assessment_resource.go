package sql

import (
	"fmt"
	"log"
	"time"

	"github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/2018-06-01-preview/sql"
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/helper/validation"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/tf"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/clients"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/services/sql/parse"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/services/sql/validate"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/tf/pluginsdk"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/timeouts"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

func resourceArmSqlMiServerVulnerabilityAssessment() *schema.Resource {
	return &schema.Resource{
		Create: resourceArmSqlMiServerVulnerabilityAssessmentCreateUpdate,
		Read:   resourceArmSqlMiServerVulnerabilityAssessmentRead,
		Update: resourceArmSqlMiServerVulnerabilityAssessmentCreateUpdate,
		Delete: resourceArmSqlMiServerVulnerabilityAssessmentDelete,
		Importer: pluginsdk.ImporterValidatingResourceId(func(id string) error {
			_, err := parse.ManagedInstanceID(id)
			return err
		}),

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(24 * time.Hour),
			Read:   schema.DefaultTimeout(5 * time.Minute),
			Update: schema.DefaultTimeout(24 * time.Hour),
			Delete: schema.DefaultTimeout(24 * time.Hour),
		},

		Schema: map[string]*schema.Schema{
			"sql_managed_instance_id": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validate.ManagedInstanceID,
			},

			"storage_container_path": {
				Type:         schema.TypeString,
				Required:     true,
				ValidateFunc: validation.StringIsNotEmpty,
			},

			"storage_container_sas_key": {
				Type:         schema.TypeString,
				Optional:     true,
				ValidateFunc: validation.StringIsNotEmpty,
				ExactlyOneOf: []string{"storage_container_access_key"},
			},

			"storage_container_access_key": {
				Type:         schema.TypeString,
				Optional:     true,
				ValidateFunc: validation.StringIsNotEmpty,
				ExactlyOneOf: []string{"storage_container_sas_key"},
			},

			"recurring_scans": {
				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:     schema.TypeBool,
							Optional: true,
							Default:  true,
						},
						"email_subscription_admins": {
							Type:     schema.TypeBool,
							Optional: true,
							// TODO find out if this is on by default
						},
						"email_addresses": {
							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
							Set: schema.HashString,
						},
					},
				},
			},
		},
	}
}

func resourceArmSqlMiServerVulnerabilityAssessmentCreateUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Sql.ManagedInstanceVulnerabilityAssessmentsClient
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.ManagedInstanceID(d.Get("sql_managed_instance_id").(string))
	if err != nil {
		return err
	}

	if d.IsNewResource() {
		existing, err := client.Get(ctx, id.ResourceGroup, id.Name)
		if err != nil {
			if !utils.ResponseWasNotFound(existing.Response) {
				return fmt.Errorf("checking for presence of existing Managed Instance Vulnerability Assessment %q: %s", id.ID(), err)
			}
		}

		if existing.ID != nil && *existing.ID != "" {
			return tf.ImportAsExistsError("azurerm_sql_managed_instance", *existing.ID)
		}
	}

	parameters := sql.ManagedInstanceVulnerabilityAssessment{
		ManagedInstanceVulnerabilityAssessmentProperties: &sql.ManagedInstanceVulnerabilityAssessmentProperties{
			StorageContainerPath:    utils.String(d.Get("storage_container_path").(string)),
			StorageContainerSasKey:  utils.String(d.Get("storage_container_sas_key").(string)),
			StorageAccountAccessKey: utils.String(d.Get("storage_container_access_key").(string)),
			RecurringScans:          expandRecurringScans(d.Get("reccurring_scans").([]interface{})),
		},
	}

	_, err = client.CreateOrUpdate(ctx, id.ResourceGroup, id.Name, parameters)
	if err != nil {
		return err
	}

	d.SetId(id.ID())

	return resourceArmSqlMiServerVulnerabilityAssessmentRead(d, meta)
}

func resourceArmSqlMiServerVulnerabilityAssessmentRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Sql.ManagedInstanceVulnerabilityAssessmentsClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.ManagedInstanceID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, id.ResourceGroup, id.Name)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			log.Printf("[INFO] Error reading SQL Managed Instance Vulnerability Assessment %q - removing from state", d.Id())
			d.SetId("")
			return nil
		}

		return fmt.Errorf("reading SQL Managed Instance Vulnerability Assessment %q: %v", id.ID(), err)
	}

	d.Set("sql_managed_instance_id", id)
	d.Set("storage_container_path", resp.StorageContainerPath)
	d.Set("storage_container_sas_key", resp.StorageContainerSasKey)
	d.Set("storage_container_access_key", resp.StorageAccountAccessKey)

	if err := d.Set("recurring_scans", flattenRecurringScans(resp.RecurringScans)); err != nil {
		return fmt.Errorf("setting `recurring_scans`: %+v", err)
	}

	return nil
}

func resourceArmSqlMiServerVulnerabilityAssessmentDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).Sql.ManagedInstanceVulnerabilityAssessmentsClient
	ctx, cancel := timeouts.ForDelete(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.ManagedInstanceID(d.Id())
	if err != nil {
		return err
	}

	_, err = client.Delete(ctx, id.ResourceGroup, id.Name)
	if err != nil {
		return fmt.Errorf("deleting SQL Managed Instance Vulnerability Assessment %q: %+v", id.ID(), err)
	}

	return nil
}

func expandRecurringScans(input []interface{}) *sql.VulnerabilityAssessmentRecurringScansProperties {
	if len(input) == 0 || input[0] == nil {
		return nil
	}
	attrs := input[0].(map[string]interface{})
	return &sql.VulnerabilityAssessmentRecurringScansProperties{
		IsEnabled:               utils.Bool(attrs["enabled"].(bool)),
		Emails:                  utils.ExpandStringSlice(attrs["email_addresses"].(*schema.Set).List()),
		EmailSubscriptionAdmins: utils.Bool(attrs["email_subscription_admins"].(bool)),
	}
}

func flattenRecurringScans(input *sql.VulnerabilityAssessmentRecurringScansProperties) []interface{} {
	if input == nil {
		return []interface{}{}
	}

	attrs := make(map[string]interface{})

	if input.EmailSubscriptionAdmins != nil {
		attrs["email_subscription_admins"] = *input.EmailSubscriptionAdmins
	}

	if input.Emails != nil {
		attrs["email_addresses"] = utils.FlattenStringSlice(input.Emails)
	}

	if input.IsEnabled != nil {
		attrs["enabled"] = *input.IsEnabled
	}

	return []interface{}{attrs}
}
